{"version":3,"file":"vue-types.js","sources":["../node_modules/is-plain-object/index.js","../node_modules/isobject/index.js","../src/utils.ts","../src/validators/native.ts","../src/validators/custom.ts","../src/validators/oneof.ts","../src/validators/oneoftype.ts","../src/validators/arrayof.ts","../src/validators/instanceof.ts","../src/validators/objectof.ts","../src/validators/shape.ts","../src/index.ts","../src/sensibles.ts"],"sourcesContent":["/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nimport isObject from 'isobject';\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nexport default function isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObjectObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n};\n","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nexport default function isObject(val) {\n  return val != null && typeof val === 'object' && Array.isArray(val) === false;\n};\n","import _isPlainObject from 'is-plain-object'\nimport Vue from 'vue'\nimport {\n  VueTypeDef,\n  VueTypeValidableDef,\n  VueProp,\n  InferType,\n  PropOptions,\n} from './types'\n\nconst ObjProto = Object.prototype\nconst toString = ObjProto.toString\nexport const hasOwn = ObjProto.hasOwnProperty\n\nconst FN_MATCH_REGEXP = /^\\s*function (\\w+)/\n\n// https://github.com/vuejs/vue/blob/dev/src/core/util/props.js#L177\nexport function getType(\n  fn: VueProp<any> | (() => any) | (new (...args: any[]) => any),\n): string {\n  const type = (fn as VueProp<any>)?.type ?? fn\n  if (type) {\n    const match = type.toString().match(FN_MATCH_REGEXP)\n    return match ? match[1] : ''\n  }\n  return ''\n}\n\nexport function getNativeType(value: any): string {\n  if (value === null || value === undefined) return ''\n  const match = value.constructor.toString().match(FN_MATCH_REGEXP)\n  return match ? match[1] : ''\n}\n\ntype PlainObject = { [key: string]: any }\nexport const isPlainObject = _isPlainObject as (obj: any) => obj is PlainObject\n\n/**\n * No-op function\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n\nlet warn: (msg: string) => void = noop\n\nif (process.env.NODE_ENV !== 'production') {\n  const hasConsole = typeof console !== 'undefined'\n  warn = hasConsole\n    ? function warn(msg) {\n        // eslint-disable-next-line no-console\n        Vue.config.silent === false && console.warn(`[VueTypes warn]: ${msg}`)\n      }\n    : noop\n}\n\nexport { warn }\n\n/**\n * Checks for a own property in an object\n *\n * @param {object} obj - Object\n * @param {string} prop - Property to check\n */\nexport const has = <T extends object, U extends keyof T>(obj: T, prop: U) =>\n  hasOwn.call(obj, prop)\n\n/**\n * Determines whether the passed value is an integer. Uses `Number.isInteger` if available\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n * @param {*} value - The value to be tested for being an integer.\n * @returns {boolean}\n */\nexport const isInteger =\n  Number.isInteger ||\n  function isInteger(value: unknown): value is number {\n    return (\n      typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value\n    )\n  }\n\n/**\n * Determines whether the passed value is an Array.\n *\n * @param {*} value - The value to be tested for being an array.\n * @returns {boolean}\n */\nexport const isArray =\n  Array.isArray ||\n  function isArray(value): value is any[] {\n    return toString.call(value) === '[object Array]'\n  }\n\n/**\n * Checks if a value is a function\n *\n * @param {any} value - Value to check\n * @returns {boolean}\n */\nexport const isFunction = (value: unknown): value is Function =>\n  toString.call(value) === '[object Function]'\n\nexport const isVueTypeDef = <T>(\n  value: any,\n): value is VueTypeDef<T> | VueTypeValidableDef<T> =>\n  isPlainObject(value) && has(value, '_vueTypes_name')\n\nexport const isComplexType = <T>(value: any): value is VueProp<T> =>\n  isPlainObject(value) &&\n  (has(value, 'type') ||\n    ['_vueTypes_name', 'validator', 'default', 'required'].some((k) =>\n      has(value, k),\n    ))\n\nexport interface WrappedFn {\n  (...args: any[]): any\n  __original: (...args: any[]) => any\n}\n\nexport function bindTo(fn: (...args: any[]) => any, ctx: any): WrappedFn {\n  return Object.defineProperty(fn.bind(ctx), '__original', {\n    value: fn,\n  })\n}\n\nexport function unwrap<T extends WrappedFn | Function>(fn: T) {\n  return (fn as WrappedFn).__original ?? fn\n}\n\n/**\n * Validates a given value against a prop type object\n *\n * @param {Object|*} type - Type to use for validation. Either a type object or a constructor\n * @param {*} value - Value to check\n * @param {boolean} silent - Silence warnings\n */\nexport function validateType<T, U>(type: T, value: U, silent = false) {\n  let typeToCheck: { [key: string]: any }\n  let valid = true\n  let expectedType = ''\n  if (!isPlainObject(type)) {\n    typeToCheck = { type }\n  } else {\n    typeToCheck = type\n  }\n  const namePrefix = isVueTypeDef(typeToCheck)\n    ? typeToCheck._vueTypes_name + ' - '\n    : ''\n\n  if (isComplexType(typeToCheck) && typeToCheck.type !== null) {\n    if (typeToCheck.type === undefined) {\n      return valid\n    }\n    if (!typeToCheck.required && value === undefined) {\n      return valid\n    }\n    if (typeToCheck.type === undefined) {\n      expectedType = 'any'\n    } else if (isArray(typeToCheck.type)) {\n      valid = typeToCheck.type.some((type: any) =>\n        validateType(type, value, true),\n      )\n      expectedType = typeToCheck.type\n        .map((type: any) => getType(type))\n        .join(' or ')\n    } else {\n      expectedType = getType(typeToCheck)\n\n      if (expectedType === 'Array') {\n        valid = isArray(value)\n      } else if (expectedType === 'Object') {\n        valid = isPlainObject(value)\n      } else if (\n        expectedType === 'String' ||\n        expectedType === 'Number' ||\n        expectedType === 'Boolean' ||\n        expectedType === 'Function'\n      ) {\n        valid = getNativeType(value) === expectedType\n      } else {\n        valid = value instanceof typeToCheck.type\n      }\n    }\n  }\n\n  if (!valid) {\n    silent === false &&\n      warn(`${namePrefix}value \"${value}\" should be of type \"${expectedType}\"`)\n    return false\n  }\n\n  if (has(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\n    // swallow warn\n    let oldWarn: any\n    if (silent) {\n      oldWarn = warn\n      warn = noop\n    }\n\n    valid = typeToCheck.validator(value)\n    oldWarn && (warn = oldWarn)\n\n    if (!valid && silent === false)\n      warn(`${namePrefix}custom validation failed`)\n    return valid\n  }\n  return valid\n}\n\n/**\n * Adds `isRequired` and `def` modifiers to an object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toType<T = any>(name: string, obj: PropOptions<T>) {\n  const type: VueTypeDef<T> = Object.defineProperties(obj, {\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    _vueTypes_name: {\n      value: name,\n      writable: true,\n    },\n    isRequired: {\n      get() {\n        this.required = true\n        return this\n      },\n    },\n    def: {\n      value(def?: any) {\n        if (def === undefined && !this.default) {\n          return this\n        }\n        if (!isFunction(def) && !validateType(this, def)) {\n          warn(`${this._vueTypes_name} - invalid default value: \"${def}\"`)\n          return this\n        }\n        if (isArray(def)) {\n          this.default = () => [...def]\n        } else if (isPlainObject(def)) {\n          this.default = () => Object.assign({}, def)\n        } else {\n          this.default = def\n        }\n        return this\n      },\n    },\n  })\n\n  const { validator } = type\n  if (isFunction(validator)) {\n    type.validator = bindTo(validator, type)\n  }\n\n  return type\n}\n\n/**\n * Like `toType` but also adds the `validate()` method to the type object\n *\n * @param {string} name - Type internal name\n * @param {object} obj - Object to enhance\n */\nexport function toValidableType<T = any>(name: string, obj: PropOptions<T>) {\n  const type = toType<T>(name, obj)\n  return Object.defineProperty(type, 'validate', {\n    value(fn: (value: T) => boolean) {\n      this.validator = bindTo(fn, this)\n      return this\n    },\n  }) as VueTypeValidableDef<T>\n}\n\nexport function clone<T extends object>(type: T): T {\n  const descriptors = {} as { [P in keyof T]: any }\n  Object.getOwnPropertyNames(type).forEach((key) => {\n    descriptors[key as keyof T] = Object.getOwnPropertyDescriptor(type, key)\n  })\n  return Object.defineProperties({}, descriptors)\n}\n\nexport function fromType<T extends VueTypeDef<any>, U = InferType<T>>(\n  name: string,\n  source: T,\n  props = {} as PropOptions<U>,\n): VueTypeDef<U> {\n  const { validator, ...rest } = props\n\n  // 1. create an exact copy of the source type\n  const copy = clone<VueTypeDef<U>>(source)\n\n  // 2. give it a new name\n  // eslint-disable-next-line @typescript-eslint/camelcase\n  copy._vueTypes_name = name\n\n  // 3. compose the validator function\n  // with the one on the source (if present)\n  // and ensure it is bound to the copy\n  if (isFunction(validator)) {\n    let { validator: prevValidator } = copy\n\n    if (prevValidator) {\n      prevValidator = unwrap(prevValidator)\n    }\n\n    copy.validator = bindTo(\n      prevValidator\n        ? function (this: VueTypeDef<U>, value: any) {\n            return (\n              prevValidator.call(this, value) && validator.call(this, value)\n            )\n          }\n        : validator,\n      copy,\n    )\n  }\n  // 4. overwrite the rest, if present\n  return Object.assign(copy, rest)\n}\n","import { toType, toValidableType, isInteger } from '../utils'\n\nexport const any = () => toValidableType('any', {})\n\nexport const func = <T extends Function>() =>\n  toValidableType<T>('function', {\n    type: Function,\n  })\n\nexport const bool = () =>\n  toValidableType('boolean', {\n    type: Boolean,\n  })\n\nexport const string = () =>\n  toValidableType('string', {\n    type: String,\n  })\n\nexport const number = () =>\n  toValidableType('number', {\n    type: Number,\n  })\n\nexport const array = <T>() =>\n  toValidableType<T[]>('array', {\n    type: Array,\n  })\n\nexport const object = <T extends { [key: string]: any }>() =>\n  toValidableType<T>('object', {\n    type: Object,\n  })\n\nexport const integer = () =>\n  toType('integer', {\n    type: Number,\n    validator(value) {\n      return isInteger(value)\n    },\n  })\n\nexport const symbol = () =>\n  toValidableType<symbol>('symbol', {\n    validator(value) {\n      return typeof value === 'symbol'\n    },\n  })\n","import { toType, warn } from '../utils'\nimport { ValidatorFunction, VueTypeDef } from '../types'\n\nexport default function custom<T>(\n  validatorFn: ValidatorFunction<T>,\n  warnMsg = 'custom validation failed',\n) {\n  if (typeof validatorFn !== 'function') {\n    throw new TypeError(\n      '[VueTypes error]: You must provide a function as argument',\n    )\n  }\n\n  return toType<T>(validatorFn.name || '<<anonymous function>>', {\n    validator(this: VueTypeDef<T>, value: T) {\n      const valid = validatorFn(value)\n      if (!valid) warn(`${this._vueTypes_name} - ${warnMsg}`)\n      return valid\n    },\n  })\n}\n","import { Prop } from '../types'\nimport { toType, warn, isArray } from '../utils'\n\nexport default function oneOf<T extends readonly any[], U = T[number]>(arr: T) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n  const msg = `oneOf - value should be one of \"${arr.join('\", \"')}\"`\n  const allowedTypes = arr.reduce((ret, v) => {\n    if (v !== null && v !== undefined) {\n      const constr = (v as any).constructor\n      ret.indexOf(constr) === -1 && ret.push(constr)\n    }\n    return ret\n  }, [] as Prop<U>[])\n\n  return toType<U>('oneOf', {\n    type: allowedTypes.length > 0 ? allowedTypes : undefined,\n    validator(value) {\n      const valid = arr.indexOf(value) !== -1\n      if (!valid) warn(msg)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport {\n  isArray,\n  isComplexType,\n  isVueTypeDef,\n  isFunction,\n  getType,\n  toType,\n  validateType,\n  warn,\n} from '../utils'\n\nexport default function oneOfType<\n  U extends VueProp<any> | Prop<any>,\n  V = InferType<U>\n>(arr: U[]) {\n  if (!isArray(arr)) {\n    throw new TypeError(\n      '[VueTypes error]: You must provide an array as argument',\n    )\n  }\n\n  let hasCustomValidators = false\n\n  let nativeChecks: Prop<V>[] = []\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const type = arr[i]\n    if (isComplexType<V>(type)) {\n      if (\n        isVueTypeDef<V>(type) &&\n        type._vueTypes_name === 'oneOf' &&\n        type.type\n      ) {\n        nativeChecks = nativeChecks.concat(type.type)\n        continue\n      }\n      if (isFunction(type.validator)) {\n        hasCustomValidators = true\n        continue\n      }\n      if (type.type) {\n        nativeChecks = nativeChecks.concat(type.type)\n        continue\n      }\n    }\n    nativeChecks.push(type as Prop<V>)\n  }\n\n  if (!hasCustomValidators) {\n    // we got just native objects (ie: Array, Object)\n    // delegate to Vue native prop check\n    return toType<V>('oneOfType', {\n      type: nativeChecks,\n    })\n  }\n\n  const typesStr = arr\n    .reduce<string[]>(\n      (ret, type) =>\n        ret.concat(\n          isComplexType<V>(type) && isArray((type as any).type)\n            ? (type as any).type.map(getType)\n            : getType(type),\n        ),\n      [],\n    )\n    .join('\", \"')\n\n  return toType<V>('oneOfType', {\n    validator(value) {\n      const valid = arr.some((type) => {\n        if (isVueTypeDef(type) && type._vueTypes_name === 'oneOf') {\n          return type.type ? validateType(type.type, value, true) : true\n        }\n        return validateType(type, value, true)\n      })\n      if (!valid) warn(`oneOfType - value type should be one of \"${typesStr}\"`)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { getType, toType, validateType, warn } from '../utils'\n\nexport default function arrayOf<\n  T extends VueProp<any> | Prop<any>,\n  U = InferType<T>\n>(type: T) {\n  return toType<U[]>('arrayOf', {\n    type: Array,\n    validator(values: any[]) {\n      const valid = values.every((value) => validateType(type, value))\n      if (!valid) warn(`arrayOf - value must be an array of \"${getType(type)}\"`)\n      return valid\n    },\n  })\n}\n","import { toType } from '../utils'\nimport { Constructor } from '../types'\n\nexport default function instanceOf<C extends Constructor>(\n  instanceConstructor: C,\n) {\n  return toType<InstanceType<C>>('instanceOf', {\n    type: instanceConstructor,\n  })\n}\n","import { Prop, VueProp, InferType } from '../types'\nimport { getType, toType, validateType, warn } from '../utils'\n\nexport default function objectOf<\n  T extends VueProp<any> | Prop<any>,\n  U = InferType<T>\n>(type: T) {\n  return toType<{ [key: string]: U }>('objectOf', {\n    type: Object,\n    validator(obj) {\n      const valid = Object.keys(obj).every((key) =>\n        validateType(type, obj[key]),\n      )\n      if (!valid)\n        warn(`objectOf - value must be an object of \"${getType(type)}\"`)\n      return valid\n    },\n  })\n}\n","import { Prop, VueProp, VueTypeShape, VueTypeLooseShape } from '../types'\nimport { toType, validateType, warn, isPlainObject } from '../utils'\n\nexport default function shape<T extends object>(\n  obj: { [K in keyof T]?: Prop<T[K]> | VueProp<T[K]> },\n): VueTypeShape<T> {\n  const keys = Object.keys(obj)\n  const requiredKeys = keys.filter((key) => !!(obj as any)[key]?.required)\n\n  const type = toType('shape', {\n    type: Object,\n    validator(this: VueTypeShape<T> | VueTypeLooseShape<T>, value) {\n      if (!isPlainObject(value)) {\n        return false\n      }\n      const valueKeys = Object.keys(value)\n\n      // check for required keys (if any)\n      if (\n        requiredKeys.length > 0 &&\n        requiredKeys.some((req) => valueKeys.indexOf(req) === -1)\n      ) {\n        warn(\n          `shape - at least one of required properties \"${requiredKeys.join(\n            '\", \"',\n          )}\" is not present`,\n        )\n        return false\n      }\n\n      return valueKeys.every((key) => {\n        if (keys.indexOf(key) === -1) {\n          if ((this as VueTypeLooseShape<T>)._vueTypes_isLoose === true)\n            return true\n          warn(`shape - object is missing \"${key}\" property`)\n          return false\n        }\n        const type = (obj as any)[key]\n        return validateType(type, value[key])\n      })\n    },\n  }) as VueTypeShape<T>\n\n  Object.defineProperty(type, '_vueTypes_isLoose', {\n    writable: true,\n    value: false,\n  })\n\n  Object.defineProperty(type, 'loose', {\n    get() {\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      this._vueTypes_isLoose = true\n      return this\n    },\n  })\n\n  return type\n}\n","import {\n  toType,\n  toValidableType,\n  validateType,\n  isArray,\n  isVueTypeDef,\n  has,\n  fromType,\n} from './utils'\n\nimport {\n  VueTypesDefaults,\n  ExtendProps,\n  VueTypeDef,\n  VueTypeValidableDef,\n} from './types'\nimport { typeDefaults } from './sensibles'\nimport { PropOptions } from 'vue'\n\nimport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n} from './validators/native'\nimport custom from './validators/custom'\nimport oneOf from './validators/oneof'\nimport oneOfType from './validators/oneoftype'\nimport arrayOf from './validators/arrayof'\nimport instanceOf from './validators/instanceof'\nimport objectOf from './validators/objectof'\nimport shape from './validators/shape'\n\nclass BaseVueTypes {\n  static defaults: Partial<VueTypesDefaults> = {}\n\n  static get any() {\n    return any()\n  }\n  static get func() {\n    return func().def(this.defaults.func)\n  }\n  static get bool() {\n    return bool().def(this.defaults.bool)\n  }\n  static get string() {\n    return string().def(this.defaults.string)\n  }\n  static get number() {\n    return number().def(this.defaults.number)\n  }\n  static get array() {\n    return array().def(this.defaults.array)\n  }\n  static get object() {\n    return object().def(this.defaults.object)\n  }\n  static get integer() {\n    return integer().def(this.defaults.integer)\n  }\n  static get symbol() {\n    return symbol()\n  }\n\n  static readonly custom = custom\n  static readonly oneOf = oneOf\n  static readonly instanceOf = instanceOf\n  static readonly oneOfType = oneOfType\n  static readonly arrayOf = arrayOf\n  static readonly objectOf = objectOf\n  static readonly shape = shape\n\n  static extend<T>(props: ExtendProps | ExtendProps[]): T {\n    if (isArray(props)) {\n      props.forEach((p) => this.extend(p))\n      return this as any\n    }\n\n    const { name, validate = false, getter = false, ...opts } = props\n\n    if (has(this, name as any)) {\n      throw new TypeError(`[VueTypes error]: Type \"${name}\" already defined`)\n    }\n\n    const { type } = opts\n    if (isVueTypeDef(type)) {\n      // we are using as base type a vue-type object\n\n      // detach the original type\n      // we are going to inherit the parent data.\n      delete opts.type\n\n      if (getter) {\n        return Object.defineProperty(this, name, {\n          get: () => fromType(name, type, opts as Omit<ExtendProps, 'type'>),\n        })\n      }\n      return Object.defineProperty(this, name, {\n        value(...args: unknown[]) {\n          const t = fromType(name, type, opts as Omit<ExtendProps, 'type'>)\n          if (t.validator) {\n            t.validator = t.validator.bind(t, ...args)\n          }\n          return t\n        },\n      })\n    }\n\n    let descriptor: PropertyDescriptor\n    if (getter) {\n      descriptor = {\n        get() {\n          const typeOptions = Object.assign({}, opts as PropOptions<T>)\n          if (validate) {\n            return toValidableType<T>(name, typeOptions)\n          }\n          return toType<T>(name, typeOptions)\n        },\n        enumerable: true,\n      }\n    } else {\n      descriptor = {\n        value(...args: T[]) {\n          const typeOptions = Object.assign({}, opts as PropOptions<T>)\n          let ret: VueTypeDef<T>\n          if (validate) {\n            ret = toValidableType<T>(name, typeOptions)\n          } else {\n            ret = toType<T>(name, typeOptions)\n          }\n\n          if (typeOptions.validator) {\n            ret.validator = typeOptions.validator.bind(ret, ...args)\n          }\n          return ret\n        },\n        enumerable: true,\n      }\n    }\n\n    return Object.defineProperty(this, name, descriptor)\n  }\n\n  static utils = {\n    validate<T, U>(value: T, type: U) {\n      return validateType<U, T>(type, value, true)\n    },\n    toType<T = unknown>(\n      name: string,\n      obj: PropOptions<T>,\n      validable = false,\n    ): VueTypeDef<T> | VueTypeValidableDef<T> {\n      return validable ? toValidableType<T>(name, obj) : toType<T>(name, obj)\n    },\n  }\n}\n\nfunction createTypes(defs: Partial<VueTypesDefaults> = typeDefaults()) {\n  return class extends BaseVueTypes {\n    static defaults: Partial<VueTypesDefaults> = { ...defs }\n\n    static get sensibleDefaults() {\n      return { ...this.defaults }\n    }\n\n    static set sensibleDefaults(v: boolean | Partial<VueTypesDefaults>) {\n      if (v === false) {\n        this.defaults = {}\n        return\n      }\n      if (v === true) {\n        this.defaults = { ...defs }\n        return\n      }\n      this.defaults = { ...v }\n    }\n  }\n}\n\nexport default class VueTypes extends createTypes() {}\n\nexport {\n  any,\n  func,\n  bool,\n  string,\n  number,\n  array,\n  integer,\n  symbol,\n  object,\n  custom,\n  oneOf,\n  oneOfType,\n  arrayOf,\n  instanceOf,\n  objectOf,\n  shape,\n  createTypes,\n  toType,\n  toValidableType,\n  validateType,\n  fromType,\n}\n\nexport { VueTypeDef, VueTypeValidableDef }\n","import { VueTypesDefaults } from './types'\n\nexport const typeDefaults = (): VueTypesDefaults => ({\n  func: () => undefined,\n  bool: true,\n  string: '',\n  number: 0,\n  array: () => [],\n  object: () => ({}),\n  integer: 0,\n})\n"],"names":["isObjectObject","o","val","Array","isArray","Object","prototype","toString","call","ObjProto","hasOwn","hasOwnProperty","FN_MATCH_REGEXP","getType","fn","type","match","isPlainObject","ctor","prot","constructor","noop","warn","process","env","NODE_ENV","hasConsole","console","msg","Vue","config","silent","has","obj","prop","isInteger","Number","value","isFinite","Math","floor","isFunction","isVueTypeDef","isComplexType","some","k","bindTo","ctx","defineProperty","bind","validateType","typeToCheck","valid","expectedType","oldWarn","namePrefix","_vueTypes_name","undefined","required","map","join","getNativeType","validator","toType","name","defineProperties","writable","isRequired","get","this","def","default","assign","toValidableType","fromType","source","props","descriptors","rest","copy","getOwnPropertyNames","forEach","key","getOwnPropertyDescriptor","prevValidator","__original","any","func","Function","bool","Boolean","string","String","number","array","object","integer","symbol","custom","validatorFn","warnMsg","TypeError","oneOf","arr","allowedTypes","reduce","ret","v","constr","indexOf","push","length","oneOfType","hasCustomValidators","nativeChecks","i","concat","typesStr","arrayOf","values","every","instanceOf","instanceConstructor","objectOf","keys","shape","requiredKeys","filter","_obj$key","valueKeys","req","_this","_vueTypes_isLoose","BaseVueTypes","extend","p","validate","getter","opts","descriptor","t","typeOptions","enumerable","defaults","createTypes","defs","validable","VueTypes"],"mappings":"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"}